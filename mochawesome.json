{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-04-12T09:00:09.012Z",
    "end": "2022-04-12T09:00:16.522Z",
    "duration": 1159,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8e10e514-c79a-4226-9682-56fe2ba82986",
      "title": "",
      "fullFile": "cypress/integration/api-tastedive-2.spec.js",
      "file": "cypress/integration/api-tastedive-2.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "05727f45-86fb-4c81-9454-f76d892e0854",
          "title": "Given TasteDive API testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d53c697f-8f78-4792-b213-b1013e9c9cd4",
              "title": "When a user send GET request to tastedive api/similar with parameters",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "then it should get tastedive query with parameters and print response",
                  "fullTitle": "Given TasteDive API testing When a user send GET request to tastedive api/similar with parameters then it should get tastedive query with parameters and print response",
                  "timedOut": null,
                  "duration": 300,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//using custom command getTastediveRecommendation\ncy.getTastediveRecommendation('stargate', 1, 'movies', 2).then(response => {\n  //print response\n  cy.log(JSON.stringify(response)); //expect code 200\n  expect(response.status).to.eq(200); //expect property Similar\n  expect(response.body).to.have.property('Similar'); //expect 2 as results lenght \n  expect(response.body.Similar.Results.length).to.be.eq(2); //expect \"Stargate\" as results\n  expect(response.body.Similar.Info[0].Name).to.be.eq(\"Stargate\");\n});",
                  "err": {},
                  "uuid": "e5748858-4106-4aa2-8018-2e07e724f723",
                  "parentUUID": "d53c697f-8f78-4792-b213-b1013e9c9cd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5748858-4106-4aa2-8018-2e07e724f723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 300,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "33d9c349-81f3-4c5b-8b00-b4310f9d867e",
      "title": "",
      "fullFile": "cypress/integration/api-tastedive-3.spec.js",
      "file": "cypress/integration/api-tastedive-3.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce611a6c-4d4d-4907-949e-5718b9202b91",
          "title": "Given TasteDive API testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7b6d80ae-3222-41a1-87ea-57987bbea7af",
              "title": "When a user send GET request to tastedive api/similar with fixtured parameters",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "then it should get tastedive first indexed fixtured query and print response",
                  "fullTitle": "Given TasteDive API testing When a user send GET request to tastedive api/similar with fixtured parameters then it should get tastedive first indexed fixtured query and print response",
                  "timedOut": null,
                  "duration": 312,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//using custom command getTastediveRecommendation\ncy.getTastediveRecommendation(user[0].searchQuery, user[0].additionalInfo, user[0].OptionalQueryType, user[0].OptionalMaxNumberToRetrieve).then(response => {\n  //print response\n  cy.log(JSON.stringify(response)); //expect code 200\n  expect(response.status).to.eq(200); //expect property Similar\n  expect(response.body).to.have.property('Similar'); //expect 2 as results lenght \n  expect(response.body.Similar.Results.length).to.be.eq(2); //expect \"Batman\" as results\n  expect(response.body.Similar.Info[0].Name).to.be.eq(\"Batman\");\n});",
                  "err": {},
                  "uuid": "7741bac9-20c7-4f9c-a47e-306c8b571b63",
                  "parentUUID": "7b6d80ae-3222-41a1-87ea-57987bbea7af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7741bac9-20c7-4f9c-a47e-306c8b571b63"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 312,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8b7eb1ab-ac15-4f63-8bb9-0fdcce2d4514",
      "title": "",
      "fullFile": "cypress/integration/api-tastedive-1.spec.js",
      "file": "cypress/integration/api-tastedive-1.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b9b647fc-3ca5-4c57-9b99-3a44ef2f1dc7",
          "title": "Given TasteDive API testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3833ae38-b74a-4a93-b45f-b02c989fa64c",
              "title": "When a user send GET request to tastedive api/similar without parameters",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "then it should get tastedive query without parameters and print response",
                  "fullTitle": "Given TasteDive API testing When a user send GET request to tastedive api/similar without parameters then it should get tastedive query without parameters and print response",
                  "timedOut": null,
                  "duration": 547,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//using custom command getTastediveRecommendation\ncy.getTastediveRecommendation().then(response => {\n  //print response\n  cy.log(JSON.stringify(response));\n  console.log(JSON.stringify(response)); //expect code 200\n  expect(response.status).to.eq(200); //expect property Similar\n  expect(response.body).to.have.property('Similar'); //expect 0 as results lenght \n  expect(response.body.Similar.Results.length).to.be.eq(0); //expect empty name as results\n  expect(response.body.Similar.Info[0].Name).to.be.eq(\"\");\n});",
                  "err": {},
                  "uuid": "d5d536f0-1b63-400c-b2ca-d90fa946a0f1",
                  "parentUUID": "3833ae38-b74a-4a93-b45f-b02c989fa64c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5d536f0-1b63-400c-b2ca-d90fa946a0f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 547,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}